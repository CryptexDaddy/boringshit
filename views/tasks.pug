extends layout

block content
    h1= title
    .tableMain
        table.ui.celled.table
            thead
                tr
                th Title
                th Task Start
                th Status
                th Task End
                th Employee
                th.collapsing Delete
            tbody
                each task in tasks
                    tr(class="task" id=task._id)
                        td
                            input(type="text" name="title" value=task.title)
                        //- td=new Date(task.time_alloted.task_start).toString()
                        td
                            input(type='datetime-local' name='task-start' value=new Date(task.time_alloted.task_start).toISOString().slice(0,-8) min=new Date(task.time_alloted.task_start).toISOString().slice(0,-8) max=new Date(task.time_alloted.task_start + 1000000000).toISOString().slice(0,-8))
                        td
                            select(name="status").dropdown
                                option(value="0" selected=task.status===0) Not Yet Started
                                option(value="1" selected=task.status===1) In Progress
                                option(value="2" selected=task.status===2) Completed
                                option(value="3" selected=task.status===3) Inactive
                        //- td=new Date(task.time_alloted.task_end).toString()
                        td
                            input(type='datetime-local' name='task-end' value=new Date(task.time_alloted.task_start).toISOString().slice(0,-8) min=new Date(task.time_alloted.task_start).toISOString().slice(0,-8) max=new Date(task.time_alloted.task_start + 1000000000).toISOString().slice(0,-8))
                        td=task.employees.map(emp => emp.display_name).join(', ')
                        td
                            .ui.form
                                .inline.field
                                    .ui.checkbox
                                        input(type='checkbox', tabindex='0' name='delete')
                                        label
        button.ui.primary.button#update
            | Edit Tasks
        button.ui.primary.button#delete
            | Delete Tasks
    form(action=`/user/tasks/create` method='POST')
        fieldset(class="create_wrapper", style='margin-top:15px; padding:unset;')
            .ui.form
                .fields
                    .field
                        label Title
                        input(type='text', placeholder='Title', name='title')
                    .field
                        label Task Start
                        input(type='datetime-local' name='task-start' value=new Date().toISOString().slice(0,-8) min=new Date().toISOString().slice(0,-8) max=new Date(Date.now() + 1000000000).toISOString().slice(0,-8))
                    .field
                        label Status
                        select.ui.dropdown(name='status')
                            option(value="0") Not Yet Started
                            option(value="1") In Progress
                            option(value="2") Completed
                            option(value="3") Inactive
                    .field
                        label Task End
                        input(type='datetime-local' name='task-end' value=new Date().toISOString().slice(0,-8) min=new Date().toISOString().slice(0,-8) max=new Date(Date.now() + 1000000000).toISOString().slice(0,-8))

           
                button.ui.primary.button
                    | Add Task

block append js
  script.
    $('select.dropdown')
        .dropdown()
    ;
    let changed_trs = []
    const inputs = document.getElementsByTagName('input');
    const selects = document.getElementsByTagName('select');

    for (let elem of [...inputs, ...selects]) {
        elem.addEventListener('change', (event) => {
            const closest_tr = elem.closest('tr');
            if (changed_trs.includes(closest_tr) && ) return
            closest_tr.style.boxShadow = "inset 0em -0.2em 0 0px gold"
            changed_trs.push(closest_tr)
        })
    }
    
    const upd = document.getElementById('update');
    upd.addEventListener('click', function () {
        if (!changed_trs.length) return;
        const obj_arr = [];
        for (tr of changed_trs) {
            const obj = {
                id: tr.id,
                title: tr.querySelector('input[name="title"]').value,
                task_start: tr.querySelector('input[name="task-start"]').value,
                status: tr.querySelector('select[name="status"]').value,
                task_end: tr.querySelector('input[name="task-end"]').value,
            }
            obj_arr.push(obj)
        }
        fetch(`/user/tasks/update`, {
            method: 'PUT',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(obj_arr)
        })
        .then(res => {
            if (res.ok) return res.json()
        })
        .then(data => {
            window.location.reload(true)
        })
    })
    const del = document.getElementById('delete');
    del.addEventListener('click', function () {
        if (!changed_trs.length) return;
        const obj_arr = changed_trs.filter(tr => tr.querySelector('input[name="delete"]') && tr.querySelector('input[name="delete"]').checked);
        fetch(`/user/tasks/delete`, {
            method: 'PUT',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(obj_arr.map(el => el.id))
        })
        .then(res => {
            if (res.ok) return res.json()
        })
        .then(data => {
            window.location.reload(true)
        })
    })
    //- const scripts_table = document.getElementById('scripts');
    //- const dlt = document.getElementsByClassName('delete');
    //- for (let del of dlt) {
    //-   del.addEventListener('click', function () {
    //-     let id = this.parentNode.parentNode.querySelector('td[name="_id"');
    //-     if (!id) return;
    //-     const type = document.getElementById('scripts-form').contains(id) ? 'script' :
    //-                 document.getElementById('gameservers-form').contains(id) ? 'gameserver' : undefined
        
    //-     fetch(`${location.href}/delete`, {
    //-       method: 'DELETE',
    //-       headers: {'Content-Type': 'application/json'},
    //-       body: JSON.stringify({_id: id.textContent, type })
    //-     })
    //-     .then(res => {
    //-       if (res.ok) return res.json()
    //-     })
    //-     .then(data => {
    //-       window.location.reload()
    //-     })
    //-   })
    //- }